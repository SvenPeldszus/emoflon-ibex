/**
 */
package IBeXLanguage.provider;

import IBeXLanguage.util.IBeXLanguageAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IBeXLanguageItemProviderAdapterFactory extends IBeXLanguageAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IBeXLanguageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXAttributeAssignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXAttributeAssignmentItemProvider iBeXAttributeAssignmentItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXAttributeAssignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXAttributeAssignmentAdapter() {
		if (iBeXAttributeAssignmentItemProvider == null) {
			iBeXAttributeAssignmentItemProvider = new IBeXAttributeAssignmentItemProvider(this);
		}

		return iBeXAttributeAssignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXAttributeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXAttributeConstraintItemProvider iBeXAttributeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXAttributeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXAttributeConstraintAdapter() {
		if (iBeXAttributeConstraintItemProvider == null) {
			iBeXAttributeConstraintItemProvider = new IBeXAttributeConstraintItemProvider(this);
		}

		return iBeXAttributeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXAttributeParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXAttributeParameterItemProvider iBeXAttributeParameterItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXAttributeParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXAttributeParameterAdapter() {
		if (iBeXAttributeParameterItemProvider == null) {
			iBeXAttributeParameterItemProvider = new IBeXAttributeParameterItemProvider(this);
		}

		return iBeXAttributeParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXAttributeValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXAttributeValueItemProvider iBeXAttributeValueItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXAttributeValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXAttributeValueAdapter() {
		if (iBeXAttributeValueItemProvider == null) {
			iBeXAttributeValueItemProvider = new IBeXAttributeValueItemProvider(this);
		}

		return iBeXAttributeValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXAttributeExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXAttributeExpressionItemProvider iBeXAttributeExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXAttributeExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXAttributeExpressionAdapter() {
		if (iBeXAttributeExpressionItemProvider == null) {
			iBeXAttributeExpressionItemProvider = new IBeXAttributeExpressionItemProvider(this);
		}

		return iBeXAttributeExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXConstantItemProvider iBeXConstantItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXConstantAdapter() {
		if (iBeXConstantItemProvider == null) {
			iBeXConstantItemProvider = new IBeXConstantItemProvider(this);
		}

		return iBeXConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXContextAlternatives} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXContextAlternativesItemProvider iBeXContextAlternativesItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXContextAlternatives}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXContextAlternativesAdapter() {
		if (iBeXContextAlternativesItemProvider == null) {
			iBeXContextAlternativesItemProvider = new IBeXContextAlternativesItemProvider(this);
		}

		return iBeXContextAlternativesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXContextPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXContextPatternItemProvider iBeXContextPatternItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXContextPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXContextPatternAdapter() {
		if (iBeXContextPatternItemProvider == null) {
			iBeXContextPatternItemProvider = new IBeXContextPatternItemProvider(this);
		}

		return iBeXContextPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXCreatePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXCreatePatternItemProvider iBeXCreatePatternItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXCreatePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXCreatePatternAdapter() {
		if (iBeXCreatePatternItemProvider == null) {
			iBeXCreatePatternItemProvider = new IBeXCreatePatternItemProvider(this);
		}

		return iBeXCreatePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXDeletePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXDeletePatternItemProvider iBeXDeletePatternItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXDeletePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXDeletePatternAdapter() {
		if (iBeXDeletePatternItemProvider == null) {
			iBeXDeletePatternItemProvider = new IBeXDeletePatternItemProvider(this);
		}

		return iBeXDeletePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXEdgeItemProvider iBeXEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXEdgeAdapter() {
		if (iBeXEdgeItemProvider == null) {
			iBeXEdgeItemProvider = new IBeXEdgeItemProvider(this);
		}

		return iBeXEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXEnumLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXEnumLiteralItemProvider iBeXEnumLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXEnumLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXEnumLiteralAdapter() {
		if (iBeXEnumLiteralItemProvider == null) {
			iBeXEnumLiteralItemProvider = new IBeXEnumLiteralItemProvider(this);
		}

		return iBeXEnumLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXNodeItemProvider iBeXNodeItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXNodeAdapter() {
		if (iBeXNodeItemProvider == null) {
			iBeXNodeItemProvider = new IBeXNodeItemProvider(this);
		}

		return iBeXNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXNodePair} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXNodePairItemProvider iBeXNodePairItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXNodePair}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXNodePairAdapter() {
		if (iBeXNodePairItemProvider == null) {
			iBeXNodePairItemProvider = new IBeXNodePairItemProvider(this);
		}

		return iBeXNodePairItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXNodeToNodeMappingItemProvider iBeXNodeToNodeMappingItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXNodeToNodeMappingAdapter() {
		if (iBeXNodeToNodeMappingItemProvider == null) {
			iBeXNodeToNodeMappingItemProvider = new IBeXNodeToNodeMappingItemProvider(this);
		}

		return iBeXNodeToNodeMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXPatternInvocation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXPatternInvocationItemProvider iBeXPatternInvocationItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXPatternInvocation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXPatternInvocationAdapter() {
		if (iBeXPatternInvocationItemProvider == null) {
			iBeXPatternInvocationItemProvider = new IBeXPatternInvocationItemProvider(this);
		}

		return iBeXPatternInvocationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXPatternSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXPatternSetItemProvider iBeXPatternSetItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXPatternSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXPatternSetAdapter() {
		if (iBeXPatternSetItemProvider == null) {
			iBeXPatternSetItemProvider = new IBeXPatternSetItemProvider(this);
		}

		return iBeXPatternSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXCSP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXCSPItemProvider iBeXCSPItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXCSP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXCSPAdapter() {
		if (iBeXCSPItemProvider == null) {
			iBeXCSPItemProvider = new IBeXCSPItemProvider(this);
		}

		return iBeXCSPItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXStochasticAttributeValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXStochasticAttributeValueItemProvider iBeXStochasticAttributeValueItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXStochasticAttributeValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXStochasticAttributeValueAdapter() {
		if (iBeXStochasticAttributeValueItemProvider == null) {
			iBeXStochasticAttributeValueItemProvider = new IBeXStochasticAttributeValueItemProvider(this);
		}

		return iBeXStochasticAttributeValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link IBeXLanguage.IBeXArithmeticValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IBeXArithmeticValueItemProvider iBeXArithmeticValueItemProvider;

	/**
	 * This creates an adapter for a {@link IBeXLanguage.IBeXArithmeticValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIBeXArithmeticValueAdapter() {
		if (iBeXArithmeticValueItemProvider == null) {
			iBeXArithmeticValueItemProvider = new IBeXArithmeticValueItemProvider(this);
		}

		return iBeXArithmeticValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (iBeXAttributeAssignmentItemProvider != null)
			iBeXAttributeAssignmentItemProvider.dispose();
		if (iBeXAttributeConstraintItemProvider != null)
			iBeXAttributeConstraintItemProvider.dispose();
		if (iBeXAttributeParameterItemProvider != null)
			iBeXAttributeParameterItemProvider.dispose();
		if (iBeXAttributeValueItemProvider != null)
			iBeXAttributeValueItemProvider.dispose();
		if (iBeXAttributeExpressionItemProvider != null)
			iBeXAttributeExpressionItemProvider.dispose();
		if (iBeXConstantItemProvider != null)
			iBeXConstantItemProvider.dispose();
		if (iBeXContextAlternativesItemProvider != null)
			iBeXContextAlternativesItemProvider.dispose();
		if (iBeXContextPatternItemProvider != null)
			iBeXContextPatternItemProvider.dispose();
		if (iBeXCreatePatternItemProvider != null)
			iBeXCreatePatternItemProvider.dispose();
		if (iBeXDeletePatternItemProvider != null)
			iBeXDeletePatternItemProvider.dispose();
		if (iBeXEdgeItemProvider != null)
			iBeXEdgeItemProvider.dispose();
		if (iBeXEnumLiteralItemProvider != null)
			iBeXEnumLiteralItemProvider.dispose();
		if (iBeXNodeItemProvider != null)
			iBeXNodeItemProvider.dispose();
		if (iBeXNodePairItemProvider != null)
			iBeXNodePairItemProvider.dispose();
		if (iBeXNodeToNodeMappingItemProvider != null)
			iBeXNodeToNodeMappingItemProvider.dispose();
		if (iBeXPatternInvocationItemProvider != null)
			iBeXPatternInvocationItemProvider.dispose();
		if (iBeXPatternSetItemProvider != null)
			iBeXPatternSetItemProvider.dispose();
		if (iBeXCSPItemProvider != null)
			iBeXCSPItemProvider.dispose();
		if (iBeXStochasticAttributeValueItemProvider != null)
			iBeXStochasticAttributeValueItemProvider.dispose();
		if (iBeXArithmeticValueItemProvider != null)
			iBeXArithmeticValueItemProvider.dispose();
	}

}
